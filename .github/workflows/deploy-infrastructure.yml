name: Deploy Infrastructure Only

on:
  workflow_dispatch:
    inputs:
      stack_name:
        description: 'CloudFormation Stack Name'
        required: false
        default: 'crawlchat-complete-stack'
        type: string
      template_file:
        description: 'Template file to deploy'
        required: false
        default: 'infra/crawlchat-complete-infrastructure.yml'
        type: string
  push:
    branches: [ main ]
    paths:
      - 'infra/**'
      - '.github/workflows/deploy-infrastructure.yml'

env:
  AWS_REGION: ap-south-1
  S3_BUCKET: crawlchat-data
  DOMAIN_NAME: api.crawlchat.site

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Validate template
      run: |
        echo "🔍 Validating CloudFormation template..."
        aws cloudformation validate-template \
          --template-body file://${{ github.event.inputs.template_file || 'infra/crawlchat-complete-infrastructure.yml' }}
        echo "✅ Template is valid"
    
    - name: Create S3 bucket
      run: |
        echo "🪣 Ensuring S3 bucket exists..."
        aws s3api create-bucket \
          --bucket ${{ env.S3_BUCKET }} \
          --region ${{ env.AWS_REGION }} \
          --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }} \
          2>/dev/null || echo "Bucket already exists"
        
        # Enable versioning
        aws s3api put-bucket-versioning \
          --bucket ${{ env.S3_BUCKET }} \
          --versioning-configuration Status=Enabled
        
        # Configure lifecycle policy
        aws s3api put-bucket-lifecycle-configuration \
          --bucket ${{ env.S3_BUCKET }} \
          --lifecycle-configuration '{
            "Rules": [
              {
                "ID": "DeleteOldVersions",
                "Status": "Enabled",
                "Filter": {},
                "NoncurrentVersionExpiration": {
                  "NoncurrentDays": 30
                }
              }
            ]
          }' 2>/dev/null || echo "Lifecycle policy already exists"
    
    - name: Deploy infrastructure
      run: |
        echo "🏗️ Deploying infrastructure..."
        STACK_NAME="${{ github.event.inputs.stack_name || 'crawlchat-complete-stack' }}"
        TEMPLATE_FILE="${{ github.event.inputs.template_file || 'infra/crawlchat-complete-infrastructure.yml' }}"
        
        # Get latest ECR image URI
        LATEST_IMAGE=$(aws ecr describe-images \
          --repository-name crawlchat-api-function \
          --region ${{ env.AWS_REGION }} \
          --query 'imageDetails[0].imageTags[0]' \
          --output text 2>/dev/null || echo "latest")
        
        IMAGE_URI="169164939839.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/crawlchat-api-function:$LATEST_IMAGE"
        
        aws cloudformation deploy \
          --template-file $TEMPLATE_FILE \
          --stack-name $STACK_NAME \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides \
            LambdaImageUri=$IMAGE_URI \
            DomainName=${{ env.DOMAIN_NAME }} \
            CertificateArn=${{ secrets.CERTIFICATE_ARN }} \
          --region ${{ env.AWS_REGION }}
        
        echo "✅ Infrastructure deployed successfully"
    
    - name: Get deployment outputs
      run: |
        echo "📋 Deployment outputs:"
        STACK_NAME="${{ github.event.inputs.stack_name || 'crawlchat-complete-stack' }}"
        
        aws cloudformation describe-stacks \
          --stack-name $STACK_NAME \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs' \
          --output table 