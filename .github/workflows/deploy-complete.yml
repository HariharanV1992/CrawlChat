name: Deploy CrawlChat Lambda Functions

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_lambda:
        description: 'Deploy Lambda Functions'
        required: false
        default: true
        type: boolean

env:
  AWS_REGION: ap-south-1
  LAMBDA_ECR_REPOSITORY: crawlchat-api-function
  CRAWLER_ECR_REPOSITORY: crawlchat-crawler-function
  LAMBDA_FUNCTION_NAME: crawlchat-api-function
  CRAWLER_FUNCTION_NAME: crawlchat-crawler-function

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Validate code structure
      run: |
        echo "üîç Validating code structure..."
        if [ ! -d "crawlchat-service" ]; then
          echo "‚ùå crawlchat-service directory not found"
          exit 1
        fi
        if [ ! -f "crawlchat-service/lambda-service/Dockerfile" ]; then
          echo "‚ùå Lambda Dockerfile not found"
          exit 1
        fi
        if [ ! -f "crawlchat-service/crawler-service/Dockerfile" ]; then
          echo "‚ùå Crawler Dockerfile not found"
          exit 1
        fi
        echo "‚úÖ Code structure validation successful"

  build-and-push:
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ github.event.inputs.deploy_lambda != 'false' || github.event_name == 'push' }}
    outputs:
      lambda-image: ${{ steps.build-lambda.outputs.lambda-image }}
      crawler-image: ${{ steps.build-crawler.outputs.crawler-image }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create ECR repositories
      run: |
        echo "üèóÔ∏è Creating ECR repositories..."
        for repo in ${{ env.LAMBDA_ECR_REPOSITORY }} ${{ env.CRAWLER_ECR_REPOSITORY }}; do
          aws ecr describe-repositories --repository-names $repo --region ${{ env.AWS_REGION }} 2>/dev/null || \
          aws ecr create-repository --repository-name $repo --region ${{ env.AWS_REGION }}
          echo "‚úÖ Repository $repo ready"
        done
    
    - name: Build and push Lambda API image
      id: build-lambda
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building Lambda API image..."
        echo "üìã Build context: $(pwd)"
        echo "üìã Dockerfile path: lambda-service/Dockerfile"
        echo "üìã ECR Registry: $ECR_REGISTRY"
        echo "üìã Image Tag: $IMAGE_TAG"
        
        cd crawlchat-service
        echo "üìã Changed to directory: $(pwd)"
        echo "üìã Directory contents:"
        ls -la
        
        echo "üìã Lambda service contents:"
        ls -la lambda-service/
        
        echo "üìã Common package contents:"
        ls -la common/
        
        docker build --no-cache -f lambda-service/Dockerfile -t $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG .
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Docker build successful"
        else
          echo "‚ùå Docker build failed"
          exit 1
        fi
        
        docker tag $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:latest
        
        echo "üì§ Pushing Lambda API image..."
        docker push $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:latest
        
        echo "lambda-image=$ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "‚úÖ Lambda API image built and pushed"
        
        # Validate that the image was actually pushed
        echo "üîç Validating image push..."
        if aws ecr describe-images --repository-name ${{ env.LAMBDA_ECR_REPOSITORY }} --image-ids imageTag=$IMAGE_TAG --region ${{ env.AWS_REGION }} >/dev/null 2>&1; then
          echo "‚úÖ Image validation successful"
        else
          echo "‚ùå Image validation failed - image not found in ECR"
          exit 1
        fi
    
    - name: Build and push Crawler image
      id: build-crawler
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building Enhanced Crawler image..."
        echo "üìã Build context: $(pwd)"
        echo "üìã Dockerfile path: crawler-service/Dockerfile"
        echo "üìã ECR Registry: $ECR_REGISTRY"
        echo "üìã Image Tag: $IMAGE_TAG"
        
        cd crawlchat-service/crawler-service
        echo "üìã Changed to directory: $(pwd)"
        echo "üìã Crawler service contents:"
        ls -la
        
        # Verify enhanced crawler service exists
        if [ ! -f "src/crawler/enhanced_crawler_service.py" ]; then
          echo "‚ùå Enhanced crawler service not found!"
          exit 1
        fi
        
        echo "‚úÖ Enhanced crawler service found"
        
        docker build --no-cache -t $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG .
        
        if [ $? -eq 0 ]; then
          echo "‚úÖ Docker build successful"
        else
          echo "‚ùå Docker build failed"
          exit 1
        fi
        
        docker tag $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:latest
        
        echo "üì§ Pushing Enhanced Crawler image..."
        docker push $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:latest
        
        echo "crawler-image=$ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "‚úÖ Enhanced Crawler image built and pushed"

  deploy-lambda-functions:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.event.inputs.deploy_lambda != 'false' || github.event_name == 'push' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update Lambda API function
      run: |
        echo "üîÑ Updating Lambda API function..."
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --image-uri ${{ needs.build-and-push.outputs.lambda-image }} \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ Lambda API function updated"
    
    - name: Update Lambda Crawler function
      run: |
        echo "üîÑ Updating Lambda Crawler function..."
        aws lambda update-function-code \
          --function-name ${{ env.CRAWLER_FUNCTION_NAME }} \
          --image-uri ${{ needs.build-and-push.outputs.crawler-image }} \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ Lambda Crawler function updated"
    
    - name: Wait for function updates
      run: |
        echo "‚è≥ Waiting for function updates to complete..."
        aws lambda wait function-updated --function-name ${{ env.LAMBDA_FUNCTION_NAME }} --region ${{ env.AWS_REGION }}
        aws lambda wait function-updated --function-name ${{ env.CRAWLER_FUNCTION_NAME }} --region ${{ env.AWS_REGION }}
        echo "‚úÖ Function updates completed"

  notify-success:
    runs-on: ubuntu-latest
    needs: deploy-lambda-functions
    if: always()
    steps:
    - name: Notify deployment success
      run: |
        if [ "${{ needs.deploy-lambda-functions.result }}" == "success" ]; then
          echo "üéâ Deployment completed successfully!"
          echo "üìã Lambda API function: ${{ env.LAMBDA_FUNCTION_NAME }}"
          echo "üìã Lambda Crawler function: ${{ env.CRAWLER_FUNCTION_NAME }}"
          echo "üìã Lambda API image: ${{ needs.build-and-push.outputs.lambda-image }}"
          echo "üìã Lambda Crawler image: ${{ needs.build-and-push.outputs.crawler-image }}"
        else
          echo "‚ùå Deployment failed!"
          exit 1
        fi

