name: Deploy Complete CrawlChat Service

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      deploy_infrastructure:
        description: 'Deploy/Update Infrastructure'
        required: false
        default: true
        type: boolean
      deploy_lambda:
        description: 'Deploy Lambda Functions'
        required: false
        default: true
        type: boolean
      deploy_ui:
        description: 'Deploy UI (if applicable)'
        required: false
        default: false
        type: boolean

env:
  AWS_REGION: ap-south-1
  STACK_NAME: crawlchat-complete-stack
  LAMBDA_ECR_REPOSITORY: crawlchat-api-function
  CRAWLER_ECR_REPOSITORY: crawlchat-crawler-function
  LAMBDA_FUNCTION_NAME: crawlchat-api-function
  CRAWLER_FUNCTION_NAME: crawlchat-crawler-function
  S3_BUCKET: crawlchat-data
  DOMAIN_NAME: api.crawlchat.site

jobs:
  validate:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Validate CloudFormation templates
      run: |
        echo "üîç Validating CloudFormation templates..."
        aws cloudformation validate-template --template-body file://infra/crawlchat-complete-infrastructure.yml
        aws cloudformation validate-template --template-body file://infra/crawlchat-crawl-worker.yml
        echo "‚úÖ All templates are valid"

  build-and-push:
    runs-on: ubuntu-latest
    needs: validate
    if: ${{ github.event.inputs.deploy_lambda != 'false' || github.event_name == 'push' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create ECR repositories
      run: |
        echo "üèóÔ∏è Creating ECR repositories..."
        for repo in ${{ env.LAMBDA_ECR_REPOSITORY }} ${{ env.CRAWLER_ECR_REPOSITORY }}; do
          aws ecr describe-repositories --repository-names $repo --region ${{ env.AWS_REGION }} 2>/dev/null || \
          aws ecr create-repository --repository-name $repo --region ${{ env.AWS_REGION }}
          echo "‚úÖ Repository $repo ready"
        done
    
    - name: Build and push Lambda API image
      id: build-lambda
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building Lambda API image..."
        cd crawlchat-service
        docker build --no-cache -f crawler-service/Dockerfile -t $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:latest
        
        echo "üì§ Pushing Lambda API image..."
        docker push $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:latest
        
        echo "lambda-image=$ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "‚úÖ Lambda API image built and pushed"
    
    - name: Build and push Crawler image
      id: build-crawler
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        echo "üê≥ Building Crawler image..."
        cd crawlchat-service
        docker build --no-cache -f crawler-service/Dockerfile -t $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:latest
        
        echo "üì§ Pushing Crawler image..."
        docker push $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:latest
        
        echo "crawler-image=$ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
        echo "‚úÖ Crawler image built and pushed"

  deploy-infrastructure:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: ${{ github.event.inputs.deploy_infrastructure != 'false' || github.event_name == 'push' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Create S3 bucket for deployment
      run: |
        echo "ü™£ Creating S3 bucket for deployment..."
        aws s3api create-bucket \
          --bucket ${{ env.S3_BUCKET }} \
          --region ${{ env.AWS_REGION }} \
          --create-bucket-configuration LocationConstraint=${{ env.AWS_REGION }} \
          2>/dev/null || echo "Bucket already exists"
        
        # Enable versioning
        aws s3api put-bucket-versioning \
          --bucket ${{ env.S3_BUCKET }} \
          --versioning-configuration Status=Enabled
    
    - name: Check and fix CloudFormation stack state
      run: |
        echo "üîç Checking CloudFormation stack state..."
        STACK_STATUS=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].StackStatus' \
          --output text 2>/dev/null || echo "STACK_NOT_FOUND")
        
        echo "üìã Current stack status: $STACK_STATUS"
        
        if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
          echo "üóëÔ∏è  Deleting failed stack in ROLLBACK_COMPLETE state..."
          aws cloudformation delete-stack \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }}
          
          echo "‚è≥ Waiting for stack deletion to complete..."
          aws cloudformation wait stack-delete-complete \
            --stack-name ${{ env.STACK_NAME }} \
            --region ${{ env.AWS_REGION }}
          
          echo "‚úÖ Failed stack deleted successfully"
        elif [ "$STACK_STATUS" = "STACK_NOT_FOUND" ]; then
          echo "‚ÑπÔ∏è  Stack does not exist - will create new one"
        else
          echo "‚ÑπÔ∏è  Stack is in state: $STACK_STATUS - proceeding with deployment"
        fi

    - name: Deploy complete infrastructure
      run: |
        echo "üèóÔ∏è Deploying complete infrastructure..."
        
        # Build parameter overrides
        PARAM_OVERRIDES="LambdaImageUri=${{ needs.build-and-push.outputs.lambda-image }} DomainName=${{ env.DOMAIN_NAME }}"
        
        # Add certificate if available
        if [ -n "${{ secrets.CERTIFICATE_ARN }}" ]; then
          PARAM_OVERRIDES="$PARAM_OVERRIDES CertificateArn=${{ secrets.CERTIFICATE_ARN }}"
          echo "üìã Using certificate: ${{ secrets.CERTIFICATE_ARN }}"
        else
          echo "‚ö†Ô∏è  No certificate provided - custom domain will not be configured"
        fi
        
        aws cloudformation deploy \
          --template-file infra/crawlchat-complete-infrastructure.yml \
          --stack-name ${{ env.STACK_NAME }} \
          --capabilities CAPABILITY_NAMED_IAM \
          --parameter-overrides $PARAM_OVERRIDES \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ Infrastructure deployed successfully"
    
    - name: Get deployment outputs
      id: outputs
      run: |
        echo "üìã Getting deployment outputs..."
        API_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`ApiGatewayUrl`].OutputValue' \
          --output text)
        
        CUSTOM_URL=$(aws cloudformation describe-stacks \
          --stack-name ${{ env.STACK_NAME }} \
          --region ${{ env.AWS_REGION }} \
          --query 'Stacks[0].Outputs[?OutputKey==`CustomDomainUrl`].OutputValue' \
          --output text)
        
        echo "api-url=$API_URL" >> $GITHUB_OUTPUT
        echo "custom-url=$CUSTOM_URL" >> $GITHUB_OUTPUT

  deploy-lambda-functions:
    runs-on: ubuntu-latest
    needs: [build-and-push, deploy-infrastructure]
    if: ${{ github.event.inputs.deploy_lambda != 'false' || github.event_name == 'push' }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Update Lambda API function
      run: |
        echo "üîÑ Updating Lambda API function..."
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --image-uri ${{ needs.build-and-push.outputs.lambda-image }} \
          --region ${{ env.AWS_REGION }}
        
        echo "‚è≥ Waiting for Lambda update..."
        aws lambda wait function-updated \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ Lambda API function updated"
    
    - name: Update Lambda environment variables
      run: |
        echo "‚öôÔ∏è Updating Lambda environment variables..."
        aws lambda update-function-configuration \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --environment Variables='{
            "ENVIRONMENT": "production",
            "S3_BUCKET": "'${{ env.S3_BUCKET }}'",
            "MONGODB_URI": "'${{ secrets.MONGODB_URI }}'",
            "DB_NAME": "stock_market_crawler",
            "COLLECTION_PREFIX": "crawler",
            "SCRAPINGBEE_API_KEY": "'${{ secrets.SCRAPINGBEE_API_KEY }}'",
            "OPENAI_API_KEY": "'${{ secrets.OPENAI_API_KEY }}'",
            "OPENAI_MODEL": "gpt-4o-mini",
            "OPENAI_MAX_TOKENS": "4000",
            "OPENAI_TEMPERATURE": "0.1",
            "SECRET_KEY": "'${{ secrets.SECRET_KEY }}'",
            "ALGORITHM": "HS256",
            "ACCESS_TOKEN_EXPIRE_MINUTES": "30",
            "CORS_ORIGINS": "[\"https://crawlchat.site\",\"https://www.crawlchat.site\"]",
            "CRAWLER_MAX_WORKERS": "10",
            "CRAWLER_TIMEOUT": "30",
            "CRAWLER_DELAY": "1.0",
            "CRAWLER_MAX_PAGES": "100",
            "CRAWLER_MAX_DOCUMENTS": "20",
            "CRAWLER_USER_AGENT": "StockMarketCrawler/1.0",
            "USE_PROXY": "true",
            "PROXY_API_KEY": "'${{ secrets.PROXY_API_KEY }}'",
            "S3_DOCUMENTS_PREFIX": "documents/",
            "S3_CRAWLED_DATA_PREFIX": "crawled_data/",
            "MAX_FILE_SIZE_MB": "50",
            "PROCESSING_TIMEOUT": "300",
            "BATCH_SIZE": "10",
            "LOG_LEVEL": "INFO",
            "LOG_FILE": "/var/log/crawlchat/app.log"
          }' \
          --region ${{ env.AWS_REGION }}
        
        echo "‚úÖ Environment variables updated"
    
    - name: Update Crawler function (if exists)
      run: |
        echo "üîÑ Updating Crawler function..."
        if aws lambda get-function --function-name ${{ env.CRAWLER_FUNCTION_NAME }} --region ${{ env.AWS_REGION }} 2>/dev/null; then
          aws lambda update-function-code \
            --function-name ${{ env.CRAWLER_FUNCTION_NAME }} \
            --image-uri ${{ needs.build-and-push.outputs.crawler-image }} \
            --region ${{ env.AWS_REGION }}
          
          aws lambda wait function-updated \
            --function-name ${{ env.CRAWLER_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }}
          
          echo "‚úÖ Crawler function updated"
        else
          echo "‚ö†Ô∏è Crawler function not found - skipping"
        fi

  test-deployment:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-lambda-functions]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Wait for functions to be ready
      run: |
        echo "‚è≥ Waiting for functions to be ready..."
        sleep 30
    
    - name: Test Lambda API function
      run: |
        echo "üß™ Testing Lambda API function..."
        cd crawlchat-service
        
        # Test health endpoint
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload '{"httpMethod":"GET","path":"/health","headers":{},"queryStringParameters":null,"body":null,"isBase64Encoded":false}' \
          --region ${{ env.AWS_REGION }} \
          response.json
        
        echo "üìÑ Health check response:"
        cat response.json | jq .
        
        # Test crawler endpoint
        aws lambda invoke \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --payload '{"url":"https://example.com"}' \
          --region ${{ env.AWS_REGION }} \
          crawler_response.json
        
        echo "üìÑ Crawler test response:"
        cat crawler_response.json | jq .
        
        echo "‚úÖ Function tests completed"

  notify:
    runs-on: ubuntu-latest
    needs: [deploy-infrastructure, deploy-lambda-functions, test-deployment]
    if: always()
    steps:
    - name: Deployment Summary
      run: |
        echo "üéâ CrawlChat Service Deployment Summary"
        echo "======================================"
        echo ""
        echo "‚úÖ Infrastructure: ${{ needs.deploy-infrastructure.result }}"
        echo "‚úÖ Lambda Functions: ${{ needs.deploy-lambda-functions.result }}"
        echo "‚úÖ Tests: ${{ needs.test-deployment.result }}"
        echo ""
        echo "üîó API Gateway URL: ${{ needs.deploy-infrastructure.outputs.api-url }}"
        echo "üîó Custom Domain: ${{ needs.deploy-infrastructure.outputs.custom-url }}"
        echo "üîó Lambda Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "üîó Crawler Function: ${{ env.CRAWLER_FUNCTION_NAME }}"
        echo ""
        echo "üìã Next Steps:"
        echo "   1. Test your API endpoints"
        echo "   2. Monitor CloudWatch logs"
        echo "   3. Check S3 cache functionality"
        echo "   4. Verify ScrapingBee integration"
        echo "   5. Test cost optimization features"
        
        if [ "${{ needs.test-deployment.result }}" != "success" ]; then
          echo "‚ö†Ô∏è Some tests failed - check CloudWatch logs for details"
          exit 1
        fi 