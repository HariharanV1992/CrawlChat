name: Build and Deploy All Services

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  LAMBDA_ECR_REPOSITORY: crawlchat-api
  CRAWLER_ECR_REPOSITORY: crawlchat-crawler
  PREPROCESSOR_ECR_REPOSITORY: crawlchat-preprocessor
  LAMBDA_FUNCTION_NAME: crawlchat-api-function
  CRAWLER_FUNCTION_NAME: crawlchat-crawler-function

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create ECR repositories
      run: |
        # Create Lambda ECR repository
        aws ecr describe-repositories --repository-names ${{ env.LAMBDA_ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} 2>/dev/null || \
        aws ecr create-repository --repository-name ${{ env.LAMBDA_ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
        
        # Create Crawler ECR repository
        aws ecr describe-repositories --repository-names ${{ env.CRAWLER_ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} 2>/dev/null || \
        aws ecr create-repository --repository-name ${{ env.CRAWLER_ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
        
        # Create Preprocessor ECR repository
        aws ecr describe-repositories --repository-names ${{ env.PREPROCESSOR_ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} 2>/dev/null || \
        aws ecr create-repository --repository-name ${{ env.PREPROCESSOR_ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
    
    - name: Build, tag, and push Lambda image to Amazon ECR
      id: build-lambda
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Lambda Docker image from the crawlchat-service directory context
        cd crawlchat-service
        docker build --no-cache -f lambda-service/Dockerfile -t $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:latest
        
        echo "lambda-image=$ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Build, tag, and push Crawler image to Amazon ECR
      id: build-crawler
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Crawler Docker image from the crawlchat-service directory context
        cd crawlchat-service
        docker build --no-cache -f crawler-service/Dockerfile -t $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:latest
        
        echo "crawler-image=$ECR_REGISTRY/${{ env.CRAWLER_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

    - name: Build, tag, and push Preprocessor image to Amazon ECR
      id: build-preprocessor
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Preprocessor Docker image from the crawlchat-service directory context
        cd crawlchat-service
        docker build --no-cache -f preprocessor-service/Dockerfile -t $ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:$IMAGE_TAG .
        docker tag $ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:latest
        
        echo "preprocessor-image=$ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Register new ECS task definition for Preprocessor
      id: register-ecs-task
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        cat > preprocessor-task-def.json <<EOF
        {
          "family": "crawlchat-preprocessor-task",
          "networkMode": "awsvpc",
          "requiresCompatibilities": ["FARGATE"],
          "cpu": "1024",
          "memory": "2048",
          "executionRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/crawlchat-ecs-task-execution-role",
          "taskRoleArn": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/crawlchat-preprocessor-task-role",
          "containerDefinitions": [
            {
              "name": "preprocessor",
              "image": "${{ steps.login-ecr.outputs.registry }}/crawlchat-preprocessor:${{ github.sha }}",
              "essential": true,
              "portMappings": [
                { "containerPort": 8000, "protocol": "tcp" }
              ],
              "environment": [
                { "name": "AWS_REGION", "value": "ap-south-1" },
                { "name": "S3_BUCKET", "value": "crawlchat-data" }
              ],
              "logConfiguration": {
                "logDriver": "awslogs",
                "options": {
                  "awslogs-group": "/ecs/crawlchat-preprocessor",
                  "awslogs-region": "ap-south-1",
                  "awslogs-stream-prefix": "ecs"
                }
              }
            }
          ]
        }
        EOF
        aws ecs register-task-definition --cli-input-json file://preprocessor-task-def.json --region ap-south-1

    - name: Update ECS Preprocessor Service
      run: |
        NEW_TASK_DEF_ARN=$(aws ecs describe-task-definition --task-definition crawlchat-preprocessor-task --region ap-south-1 --query 'taskDefinition.taskDefinitionArn' --output text)
        aws ecs update-service \
          --cluster crawlchat-cluster \
          --service crawlchat-preprocessor \
          --task-definition $NEW_TASK_DEF_ARN \
          --force-new-deployment \
          --region ap-south-1
    
    - name: Update Lambda function code
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --image-uri ${{ steps.build-lambda.outputs.lambda-image }} \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for Lambda update
      run: |
        aws lambda wait function-updated \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --region ${{ env.AWS_REGION }}
    
    - name: Update Crawler function code
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.CRAWLER_FUNCTION_NAME }} \
          --image-uri ${{ steps.build-crawler.outputs.crawler-image }} \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for Crawler update
      run: |
        aws lambda wait function-updated \
          --function-name ${{ env.CRAWLER_FUNCTION_NAME }} \
          --region ${{ env.AWS_REGION }}
    
    - name: Update Lambda environment variables
      # Removed: aws lambda update-function-configuration --environment file://lambda_env.json
      # Manage Lambda environment variables manually in AWS Console or using GitHub Secrets.
      run: |
        echo "⚠️ Skipping environment variable update from lambda_env.json. Manage env vars manually or via secrets."

    - name: Deployment complete
      run: |
        echo "✅ All three services deployed successfully!"
        echo "🔗 Lambda API Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "🔗 Crawler Function: ${{ env.CRAWLER_FUNCTION_NAME }}"
        echo "🖼️  Lambda API Image: ${{ steps.build-lambda.outputs.lambda-image }}"
        echo "🖼️  Crawler Image: ${{ steps.build-crawler.outputs.crawler-image }}"
        echo "🖼️  Preprocessor Image: ${{ steps.build-preprocessor.outputs.preprocessor-image }}"
        echo "🚀 All capabilities are now available: OCR, crawling, and preprocessing"
        echo ""
        echo "📋 Next Steps:"
        echo "   1. Test your Lambda function endpoints"
        echo "   2. Monitor CloudWatch logs for any issues"
        echo "   3. Deploy preprocessing service to ECS/Fargate when needed"
        echo "   4. Update Lambda environment variables manually in AWS Console"
        echo "   5. Test crawler functionality" 