name: Build and Deploy Both Services

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  AWS_REGION: ap-south-1
  LAMBDA_ECR_REPOSITORY: crawlchat-api
  PREPROCESSOR_ECR_REPOSITORY: crawlchat-preprocessor
  LAMBDA_FUNCTION_NAME: crawlchat-api-function

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
    
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Create ECR repositories
      run: |
        # Create Lambda ECR repository
        aws ecr describe-repositories --repository-names ${{ env.LAMBDA_ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} 2>/dev/null || \
        aws ecr create-repository --repository-name ${{ env.LAMBDA_ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
        
        # Create Preprocessor ECR repository
        aws ecr describe-repositories --repository-names ${{ env.PREPROCESSOR_ECR_REPOSITORY }} --region ${{ env.AWS_REGION }} 2>/dev/null || \
        aws ecr create-repository --repository-name ${{ env.PREPROCESSOR_ECR_REPOSITORY }} --region ${{ env.AWS_REGION }}
    
    - name: Build, tag, and push Lambda image to Amazon ECR
      id: build-lambda
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Lambda Docker image from the crawlchat-service directory context
        docker build --no-cache -f lambda-service/Dockerfile -t $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG crawlchat-service/
        docker tag $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:latest
        
        echo "lambda-image=$ECR_REGISTRY/${{ env.LAMBDA_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Build, tag, and push Preprocessor image to Amazon ECR
      id: build-preprocessor
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build the Preprocessor Docker image from the crawlchat-service directory context
        docker build --no-cache -f preprocessor-service/Dockerfile -t $ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:$IMAGE_TAG crawlchat-service/
        docker tag $ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:$IMAGE_TAG $ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:latest
        
        # Push to ECR
        docker push $ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:$IMAGE_TAG
        docker push $ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:latest
        
        echo "preprocessor-image=$ECR_REGISTRY/${{ env.PREPROCESSOR_ECR_REPOSITORY }}:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    - name: Update Lambda function code
      run: |
        aws lambda update-function-code \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --image-uri ${{ steps.build-lambda.outputs.lambda-image }} \
          --region ${{ env.AWS_REGION }}
    
    - name: Wait for Lambda update
      run: |
        aws lambda wait function-updated \
          --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
          --region ${{ env.AWS_REGION }}
    
    - name: Update Lambda environment variables
      # Removed: aws lambda update-function-configuration --environment file://lambda_env.json
      # Manage Lambda environment variables manually in AWS Console or using GitHub Secrets.
      run: |
        echo "‚ö†Ô∏è Skipping environment variable update from lambda_env.json. Manage env vars manually or via secrets."

    - name: Deployment complete
      run: |
        echo "‚úÖ Both services deployed successfully!"
        echo "üîó Lambda Function: ${{ env.LAMBDA_FUNCTION_NAME }}"
        echo "üñºÔ∏è  Lambda Image: ${{ steps.build-lambda.outputs.lambda-image }}"
        echo "üñºÔ∏è  Preprocessor Image: ${{ steps.build-preprocessor.outputs.preprocessor-image }}"
        echo "üöÄ OCR capabilities are now available for document processing"
        echo ""
        echo "üìã Next Steps:"
        echo "   1. Test your Lambda function endpoints"
        echo "   2. Monitor CloudWatch logs for any issues"
        echo "   3. Deploy preprocessing service to ECS/Fargate when needed"
        echo "   4. Update Lambda environment variables manually in AWS Console" 