FROM public.ecr.aws/lambda/python:3.10

# Install build dependencies and OCR requirements
RUN yum update -y && yum install -y \
    gcc \
    gcc-c++ \
    make \
    openssl-devel \
    libffi-devel \
    python3-devel \
    libjpeg-devel \
    zlib-devel \
    freetype-devel \
    lcms2-devel \
    libwebp-devel \
    tcl-devel \
    tk-devel \
    # OCR dependencies
    tesseract \
    tesseract-langpack-eng \
    poppler-utils \
    poppler-devel \
    leptonica-devel \
    libpng-devel \
    libtiff-devel \
    && yum clean all

# Copy requirements file
COPY requirements.txt /tmp/

# Install Python packages in Lambda environment
RUN pip install -r /tmp/requirements.txt -t /opt/python --no-cache-dir

# Ensure pydantic_core is properly installed
RUN pip install pydantic-core>=2.0.0 -t /opt/python --no-cache-dir --force-reinstall

# Copy Tesseract binary and data to Lambda layer
RUN mkdir -p /opt/tesseract
RUN cp -r /usr/bin/tesseract /opt/tesseract/
RUN cp -r /usr/share/tessdata /opt/tesseract/
RUN cp -r /usr/lib64/libtesseract* /opt/tesseract/

# Clean up unnecessary files to reduce layer size
RUN find /opt/python -type d -name "__pycache__" -exec rm -rf {} + 2>/dev/null || true
RUN find /opt/python -type d -name "tests" -exec rm -rf {} + 2>/dev/null || true
RUN find /opt/python -type d -name "*.egg-info" -exec rm -rf {} + 2>/dev/null || true
RUN find /opt/python -name "*.pyc" -delete 2>/dev/null || true
RUN find /opt/python -name "*.pyo" -delete 2>/dev/null || true
RUN find /opt/python -name "*.md" -delete 2>/dev/null || true
RUN find /opt/python -name "*.txt" -delete 2>/dev/null || true
RUN find /opt/python -name "*.rst" -delete 2>/dev/null || true
RUN find /opt/python -name "LICENSE*" -delete 2>/dev/null || true
RUN find /opt/python -name "README*" -delete 2>/dev/null || true

# Remove large test directories from packages
RUN rm -rf /opt/python/bs4/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/lxml/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/aiohttp/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/requests/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/httpx/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/fastapi/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/pydantic/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/pydantic_core/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/motor/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/pymongo/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/openai/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/selenium/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/beautifulsoup4/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/PyPDF2/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/pdfminer/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/html2text/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/python_jose/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/passlib/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/mangum/tests/ 2>/dev/null || true
RUN rm -rf /opt/python/cryptography/tests/ 2>/dev/null || true

# Remove unnecessary documentation and examples
RUN find /opt/python -name "examples" -type d -exec rm -rf {} + 2>/dev/null || true
RUN find /opt/python -name "docs" -type d -exec rm -rf {} + 2>/dev/null || true
RUN find /opt/python -name "doc" -type d -exec rm -rf {} + 2>/dev/null || true

# Keep .dist-info directories as they contain essential package metadata
# Only remove .egg-info directories which are not needed
RUN find /opt/python -name "*.egg-info" -type d -exec rm -rf {} + 2>/dev/null || true

# Verify pydantic_core is present
RUN ls -la /opt/python/pydantic_core/ || echo "pydantic_core not found, will reinstall"
RUN python -c "import pydantic_core; print('pydantic_core imported successfully')" || echo "pydantic_core import failed"

# Verify OCR dependencies
RUN ls -la /opt/tesseract/ || echo "Tesseract not found"
RUN python -c "import pytesseract; print('pytesseract imported successfully')" || echo "pytesseract import failed"
RUN python -c "from pdf2image import convert_from_bytes; print('pdf2image imported successfully')" || echo "pdf2image import failed"

# Show final layer size
RUN du -sh /opt/python
RUN du -sh /opt/tesseract

# Create a simple command to keep container running
CMD ["/bin/bash", "-c", "echo 'Layer built successfully with OCR support' && sleep infinity"] 