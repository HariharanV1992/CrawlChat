AWSTemplateFormatVersion: '2010-09-09'
Description: >
  CrawlChat Complete Infrastructure with API Gateway and Lambda Functions

Parameters:
  LambdaImageUri:
    Type: String
    Description: ECR image URI for the Lambda worker (e.g. 123456789012.dkr.ecr.ap-south-1.amazonaws.com/crawlchat-crawl-worker:latest)
  DomainName:
    Type: String
    Default: "api.crawlchat.site"
    Description: Domain name for the API Gateway
  CertificateArn:
    Type: String
    Default: ""
    Description: ARN of the SSL certificate for the domain (optional)

Resources:
  # S3 Bucket for data storage and caching
  CrawlChatDataBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "crawlchat-data-${AWS::AccountId}-${AWS::Region}"
      VersioningConfiguration:
        Status: Enabled
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true

  # API Gateway
  CrawlChatApiGateway:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: crawlchat-api
      Description: CrawlChat API Gateway
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Resources
  CrawlChatApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref CrawlChatApiGateway
      ParentId: !GetAtt CrawlChatApiGateway.RootResourceId
      PathPart: "{proxy+}"

  # API Gateway Methods
  CrawlChatApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CrawlChatApiGateway
      ResourceId: !Ref CrawlChatApiResource
      HttpMethod: ANY
      AuthorizationType: NONE
      RequestParameters:
        method.request.path.proxy: true
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrawlChatCrawlWorkerFunction.Arn}/invocations"

  CrawlChatApiRootMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref CrawlChatApiGateway
      ResourceId: !GetAtt CrawlChatApiGateway.RootResourceId
      HttpMethod: ANY
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CrawlChatCrawlWorkerFunction.Arn}/invocations"

  # Lambda Function
  CrawlChatCrawlWorkerFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: crawlchat-crawl-worker
      Role: !GetAtt CrawlChatCrawlWorkerRole.Arn
      PackageType: Image
      Code:
        ImageUri: !Ref LambdaImageUri
      Timeout: 900
      MemorySize: 1024
      Environment:
        Variables:
          S3_BUCKET: !Ref CrawlChatDataBucket

  # Lambda Permission for API Gateway
  CrawlChatLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CrawlChatCrawlWorkerFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${CrawlChatApiGateway}/*/*"

  # IAM Role for Lambda
  CrawlChatCrawlWorkerRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: crawlchat-crawl-worker-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: crawlchat-crawl-worker-policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: "*"

              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:DeleteObject
                  - s3:ListBucket
                Resource:
                  - !GetAtt CrawlChatDataBucket.Arn
                  - !Sub "${CrawlChatDataBucket.Arn}/*"

  # API Gateway Deployment
  CrawlChatApiDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
      - CrawlChatApiMethod
      - CrawlChatApiRootMethod
    Properties:
      RestApiId: !Ref CrawlChatApiGateway
      StageName: prod

  # Custom Domain Name (conditional)
  CrawlChatCustomDomain:
    Type: AWS::ApiGateway::DomainName
    Condition: HasCertificate
    Properties:
      DomainName: !Ref DomainName
      RegionalCertificateArn: !Ref CertificateArn
      EndpointConfiguration:
        Types:
          - REGIONAL

  # API Gateway Base Path Mapping (conditional)
  CrawlChatBasePathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Condition: HasCertificate
    Properties:
      DomainName: !Ref CrawlChatCustomDomain
      RestApiId: !Ref CrawlChatApiGateway
      Stage: !Ref CrawlChatApiDeployment

  # Route53 Record (conditional)
  CrawlChatApiRecord:
    Type: AWS::Route53::RecordSet
    Condition: HasCertificate
    Properties:
      HostedZoneName: crawlchat.site.
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt CrawlChatCustomDomain.RegionalDomainName
        HostedZoneId: !GetAtt CrawlChatCustomDomain.RegionalHostedZoneId

Conditions:
  HasCertificate: !Not [!Equals [!Ref CertificateArn, ""]]

Outputs:
  ApiGatewayUrl:
    Description: "URL of the API Gateway"
    Value: !Sub "https://${CrawlChatApiGateway}.execute-api.${AWS::Region}.amazonaws.com/prod"
  CustomDomainUrl:
    Description: "Custom domain URL for the API"
    Value: !If [HasCertificate, !Sub "https://${DomainName}", "Not configured"]
  LambdaFunctionName:
    Description: "Name of the Lambda function"
    Value: !Ref CrawlChatCrawlWorkerFunction
  S3BucketName:
    Description: "S3 bucket for data storage and caching"
    Value: !Ref CrawlChatDataBucket 